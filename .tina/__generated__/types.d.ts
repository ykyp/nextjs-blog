//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** References another document, used as a foreign key */
  Reference: any;
  JSON: any;
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String'];
  title?: Maybe<Scalars['String']>;
  basename: Scalars['String'];
  breadcrumbs: Array<Scalars['String']>;
  path: Scalars['String'];
  relativePath: Scalars['String'];
  extension: Scalars['String'];
  template: Scalars['String'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']>;
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean'];
  hasNextPage: Scalars['Boolean'];
  startCursor: Scalars['String'];
  endCursor: Scalars['String'];
};

export type Node = {
  id: Scalars['ID'];
};

export type Document = {
  id: Scalars['ID'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  events: Events;
  eventsConnection: EventsConnection;
  theatres: Theatres;
  theatresConnection: TheatresConnection;
  archive: Archive;
  archiveConnection: ArchiveConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryEventsArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryEventsConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<EventsFilter>;
};


export type QueryTheatresArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryTheatresConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<TheatresFilter>;
};


export type QueryArchiveArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryArchiveConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<ArchiveFilter>;
};

export type DocumentFilter = {
  events?: InputMaybe<EventsFilter>;
  theatres?: InputMaybe<TheatresFilter>;
  archive?: InputMaybe<ArchiveFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String'];
  slug: Scalars['String'];
  label?: Maybe<Scalars['String']>;
  path: Scalars['String'];
  format?: Maybe<Scalars['String']>;
  matches?: Maybe<Scalars['String']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<DocumentFilter>;
};

export type DocumentNode = Events | Theatres | Archive;

export type Events = Node & Document & {
  __typename?: 'Events';
  body?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type RichTextFilter = {
  startsWith?: InputMaybe<Scalars['String']>;
  eq?: InputMaybe<Scalars['String']>;
  exists?: InputMaybe<Scalars['Boolean']>;
};

export type EventsFilter = {
  body?: InputMaybe<RichTextFilter>;
};

export type EventsConnectionEdges = {
  __typename?: 'EventsConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Events>;
};

export type EventsConnection = Connection & {
  __typename?: 'EventsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<EventsConnectionEdges>>>;
};

export type Theatres = Node & Document & {
  __typename?: 'Theatres';
  body?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type TheatresFilter = {
  body?: InputMaybe<RichTextFilter>;
};

export type TheatresConnectionEdges = {
  __typename?: 'TheatresConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Theatres>;
};

export type TheatresConnection = Connection & {
  __typename?: 'TheatresConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<TheatresConnectionEdges>>>;
};

export type Archive = Node & Document & {
  __typename?: 'Archive';
  body?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type ArchiveFilter = {
  body?: InputMaybe<RichTextFilter>;
};

export type ArchiveConnectionEdges = {
  __typename?: 'ArchiveConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Archive>;
};

export type ArchiveConnection = Connection & {
  __typename?: 'ArchiveConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<ArchiveConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  updateEvents: Events;
  createEvents: Events;
  updateTheatres: Theatres;
  createTheatres: Theatres;
  updateArchive: Archive;
  createArchive: Archive;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String'];
  relativePath: Scalars['String'];
  template?: InputMaybe<Scalars['String']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentMutation;
};


export type MutationUpdateEventsArgs = {
  relativePath: Scalars['String'];
  params: EventsMutation;
};


export type MutationCreateEventsArgs = {
  relativePath: Scalars['String'];
  params: EventsMutation;
};


export type MutationUpdateTheatresArgs = {
  relativePath: Scalars['String'];
  params: TheatresMutation;
};


export type MutationCreateTheatresArgs = {
  relativePath: Scalars['String'];
  params: TheatresMutation;
};


export type MutationUpdateArchiveArgs = {
  relativePath: Scalars['String'];
  params: ArchiveMutation;
};


export type MutationCreateArchiveArgs = {
  relativePath: Scalars['String'];
  params: ArchiveMutation;
};

export type DocumentUpdateMutation = {
  events?: InputMaybe<EventsMutation>;
  theatres?: InputMaybe<TheatresMutation>;
  archive?: InputMaybe<ArchiveMutation>;
  relativePath?: InputMaybe<Scalars['String']>;
};

export type DocumentMutation = {
  events?: InputMaybe<EventsMutation>;
  theatres?: InputMaybe<TheatresMutation>;
  archive?: InputMaybe<ArchiveMutation>;
};

export type EventsMutation = {
  body?: InputMaybe<Scalars['JSON']>;
};

export type TheatresMutation = {
  body?: InputMaybe<Scalars['JSON']>;
};

export type ArchiveMutation = {
  body?: InputMaybe<Scalars['JSON']>;
};

export type EventsPartsFragment = { __typename?: 'Events', body?: any | null };

export type TheatresPartsFragment = { __typename?: 'Theatres', body?: any | null };

export type ArchivePartsFragment = { __typename?: 'Archive', body?: any | null };

export type EventsQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type EventsQuery = { __typename?: 'Query', events: { __typename?: 'Events', id: string, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type EventsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<EventsFilter>;
}>;


export type EventsConnectionQuery = { __typename?: 'Query', eventsConnection: { __typename?: 'EventsConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'EventsConnectionEdges', cursor: string, node?: { __typename?: 'Events', id: string, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type TheatresQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type TheatresQuery = { __typename?: 'Query', theatres: { __typename?: 'Theatres', id: string, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type TheatresConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<TheatresFilter>;
}>;


export type TheatresConnectionQuery = { __typename?: 'Query', theatresConnection: { __typename?: 'TheatresConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'TheatresConnectionEdges', cursor: string, node?: { __typename?: 'Theatres', id: string, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type ArchiveQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type ArchiveQuery = { __typename?: 'Query', archive: { __typename?: 'Archive', id: string, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type ArchiveConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<ArchiveFilter>;
}>;


export type ArchiveConnectionQuery = { __typename?: 'Query', archiveConnection: { __typename?: 'ArchiveConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'ArchiveConnectionEdges', cursor: string, node?: { __typename?: 'Archive', id: string, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export const EventsPartsFragmentDoc = gql`
    fragment EventsParts on Events {
  body
}
    `;
export const TheatresPartsFragmentDoc = gql`
    fragment TheatresParts on Theatres {
  body
}
    `;
export const ArchivePartsFragmentDoc = gql`
    fragment ArchiveParts on Archive {
  body
}
    `;
export const EventsDocument = gql`
    query events($relativePath: String!) {
  events(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...EventsParts
  }
}
    ${EventsPartsFragmentDoc}`;
export const EventsConnectionDocument = gql`
    query eventsConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: EventsFilter) {
  eventsConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...EventsParts
      }
    }
  }
}
    ${EventsPartsFragmentDoc}`;
export const TheatresDocument = gql`
    query theatres($relativePath: String!) {
  theatres(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...TheatresParts
  }
}
    ${TheatresPartsFragmentDoc}`;
export const TheatresConnectionDocument = gql`
    query theatresConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: TheatresFilter) {
  theatresConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...TheatresParts
      }
    }
  }
}
    ${TheatresPartsFragmentDoc}`;
export const ArchiveDocument = gql`
    query archive($relativePath: String!) {
  archive(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...ArchiveParts
  }
}
    ${ArchivePartsFragmentDoc}`;
export const ArchiveConnectionDocument = gql`
    query archiveConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: ArchiveFilter) {
  archiveConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...ArchiveParts
      }
    }
  }
}
    ${ArchivePartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      events(variables: EventsQueryVariables, options?: C): Promise<{data: EventsQuery, variables: EventsQueryVariables, query: string}> {
        return requester<{data: EventsQuery, variables: EventsQueryVariables, query: string}, EventsQueryVariables>(EventsDocument, variables, options);
      },
    eventsConnection(variables?: EventsConnectionQueryVariables, options?: C): Promise<{data: EventsConnectionQuery, variables: EventsConnectionQueryVariables, query: string}> {
        return requester<{data: EventsConnectionQuery, variables: EventsConnectionQueryVariables, query: string}, EventsConnectionQueryVariables>(EventsConnectionDocument, variables, options);
      },
    theatres(variables: TheatresQueryVariables, options?: C): Promise<{data: TheatresQuery, variables: TheatresQueryVariables, query: string}> {
        return requester<{data: TheatresQuery, variables: TheatresQueryVariables, query: string}, TheatresQueryVariables>(TheatresDocument, variables, options);
      },
    theatresConnection(variables?: TheatresConnectionQueryVariables, options?: C): Promise<{data: TheatresConnectionQuery, variables: TheatresConnectionQueryVariables, query: string}> {
        return requester<{data: TheatresConnectionQuery, variables: TheatresConnectionQueryVariables, query: string}, TheatresConnectionQueryVariables>(TheatresConnectionDocument, variables, options);
      },
    archive(variables: ArchiveQueryVariables, options?: C): Promise<{data: ArchiveQuery, variables: ArchiveQueryVariables, query: string}> {
        return requester<{data: ArchiveQuery, variables: ArchiveQueryVariables, query: string}, ArchiveQueryVariables>(ArchiveDocument, variables, options);
      },
    archiveConnection(variables?: ArchiveConnectionQueryVariables, options?: C): Promise<{data: ArchiveConnectionQuery, variables: ArchiveConnectionQueryVariables, query: string}> {
        return requester<{data: ArchiveConnectionQuery, variables: ArchiveConnectionQueryVariables, query: string}, ArchiveConnectionQueryVariables>(ArchiveConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (client: TinaClient) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: any,
    client
  ) => Promise<any> = async (doc, vars, _options) => {
    const data = await client.request({
      query: doc,
      variables: vars,
    });

    return { data: data?.data, query: doc, variables: vars || {} };
  };

  return requester;
};

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(createClient({ url: "http://localhost:4001/graphql", queries }))
  );

export const queries = (client: TinaClient) => {
  const requester = generateRequester(client);
  return getSdk(requester);
};

  