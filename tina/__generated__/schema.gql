# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  events(relativePath: String): Events!
  eventsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: EventsFilter): EventsConnection!
  theatres(relativePath: String): Theatres!
  theatresConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: TheatresFilter): TheatresConnection!
  archive(relativePath: String): Archive!
  archiveConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ArchiveFilter): ArchiveConnection!
}

input DocumentFilter {
  events: EventsFilter
  theatres: TheatresFilter
  archive: ArchiveFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Events | Theatres | Archive | Folder

union EventsTheatresName = Theatres

type EventsTheatres {
  name: EventsTheatresName
}

type EventsGallery_images {
  imgSrc: String
}

type Events implements Node & Document {
  title: String
  city: String
  startDate: String
  endDate: String
  nicosia_dates: String
  limassol_dates: String
  larnaca_dates: String
  famagusta_dates: String
  paphos_dates: String
  event_image: String
  cover_image: String
  category: String
  extended: Boolean
  theatres: [EventsTheatres]
  gallery_images: [EventsGallery_images]
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input EventsTheatresNameFilter {
  theatres: TheatresFilter
}

input EventsTheatresFilter {
  name: EventsTheatresNameFilter
}

input EventsGallery_imagesFilter {
  imgSrc: ImageFilter
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input EventsFilter {
  title: StringFilter
  city: StringFilter
  startDate: DatetimeFilter
  endDate: DatetimeFilter
  nicosia_dates: StringFilter
  limassol_dates: StringFilter
  larnaca_dates: StringFilter
  famagusta_dates: StringFilter
  paphos_dates: StringFilter
  event_image: ImageFilter
  cover_image: ImageFilter
  category: StringFilter
  extended: BooleanFilter
  theatres: EventsTheatresFilter
  gallery_images: EventsGallery_imagesFilter
  body: RichTextFilter
}

type EventsConnectionEdges {
  cursor: String!
  node: Events
}

type EventsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [EventsConnectionEdges]
}

type Theatres implements Node & Document {
  name: String
  city: String
  google_maps_link: String
  address: String
  latlong: String
  logo: String
  website: String
  instagram_page: String
  facebook_page: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input TheatresFilter {
  name: StringFilter
  city: StringFilter
  google_maps_link: StringFilter
  address: StringFilter
  latlong: StringFilter
  logo: ImageFilter
  website: StringFilter
  instagram_page: StringFilter
  facebook_page: StringFilter
}

type TheatresConnectionEdges {
  cursor: String!
  node: Theatres
}

type TheatresConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [TheatresConnectionEdges]
}

type Archive implements Node & Document {
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ArchiveFilter {
  body: RichTextFilter
}

type ArchiveConnectionEdges {
  cursor: String!
  node: Archive
}

type ArchiveConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ArchiveConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateEvents(relativePath: String!, params: EventsMutation!): Events!
  createEvents(relativePath: String!, params: EventsMutation!): Events!
  updateTheatres(relativePath: String!, params: TheatresMutation!): Theatres!
  createTheatres(relativePath: String!, params: TheatresMutation!): Theatres!
  updateArchive(relativePath: String!, params: ArchiveMutation!): Archive!
  createArchive(relativePath: String!, params: ArchiveMutation!): Archive!
}

input DocumentUpdateMutation {
  events: EventsMutation
  theatres: TheatresMutation
  archive: ArchiveMutation
  relativePath: String
}

input DocumentMutation {
  events: EventsMutation
  theatres: TheatresMutation
  archive: ArchiveMutation
}

input EventsTheatresMutation {
  name: String
}

input EventsGallery_imagesMutation {
  imgSrc: String
}

input EventsMutation {
  title: String
  city: String
  startDate: String
  endDate: String
  nicosia_dates: String
  limassol_dates: String
  larnaca_dates: String
  famagusta_dates: String
  paphos_dates: String
  event_image: String
  cover_image: String
  category: String
  extended: Boolean
  theatres: [EventsTheatresMutation]
  gallery_images: [EventsGallery_imagesMutation]
  body: JSON
}

input TheatresMutation {
  name: String
  city: String
  google_maps_link: String
  address: String
  latlong: String
  logo: String
  website: String
  instagram_page: String
  facebook_page: String
}

input ArchiveMutation {
  body: JSON
}

schema {
  query: Query
  mutation: Mutation
}
